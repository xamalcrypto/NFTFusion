# scripts/nft_creation.py

from web3 import Web3
from solcx import compile_source

def deploy_erc721_contract(web3, contract_source, contract_name, private_key, account_address):
    """
    Deploy an ERC-721 contract to the Ethereum network.

    :param web3: Web3 instance connected to Ethereum
    :param contract_source: Solidity source code of the ERC-721 contract
    :param contract_name: Name of the contract to deploy
    :param private_key: Private key of the deployer account
    :param account_address: Address of the deployer account
    :return: Contract address and ABI
    """
    compiled_sol = compile_source(contract_source)
    contract_interface = compiled_sol[f'<stdin>:{contract_name}']
    
    contract = web3.eth.contract(abi=contract_interface['abi'], bytecode=contract_interface['bin'])
    
    # Prepare transaction
    transaction = contract.constructor().buildTransaction({
        'chainId': 1,  # Ethereum Mainnet
        'gas': 4000000,
        'gasPrice': web3.toWei('20', 'gwei'),
        'nonce': web3.eth.getTransactionCount(account_address),
    })
    
    # Sign and send transaction
    signed_txn = web3.eth.account.sign_transaction(transaction, private_key=private_key)
    tx_hash = web3.eth.sendRawTransaction(signed_txn.rawTransaction)
    
    # Wait for transaction receipt
    tx_receipt = web3.eth.waitForTransactionReceipt(tx_hash)
    
    # Get contract address and ABI
    contract_address = tx_receipt.contractAddress
    abi = contract_interface['abi']
    
    return contract_address, abi

def mint_nft(web3, contract_address, abi, token_id, metadata_uri, private_key, account_address):
    """
    Mint a new NFT.

    :param web3: Web3 instance connected to Ethereum
    :param contract_address: Address of the ERC-721 contract
    :param abi: ABI of the ERC-721 contract
    :param token_id: ID of the token to mint
    :param metadata_uri: URI pointing to the token metadata
    :param private_key: Private key of the minter
    :param account_address: Address of the minter
    :return: Transaction receipt
    """
    contract = web3.eth.contract(address=contract_address, abi=abi)
    
    # Prepare transaction
    transaction = contract.functions.mint(account_address, token_id, metadata_uri).buildTransaction({
        'chainId': 1,  # Ethereum Mainnet
        'gas': 300000,
        'gasPrice': web3.toWei('20', 'gwei'),
        'nonce': web3.eth.getTransactionCount(account_address),
    })
    
    # Sign and send transaction
    signed_txn = web3.eth.account.sign_transaction(transaction, private_key=private_key)
    tx_hash = web3.eth.sendRawTransaction(signed_txn.rawTransaction)
    
    # Wait for transaction receipt
    tx_receipt = web3.eth.waitForTransactionReceipt(tx_hash)
    return tx_receipt

# Example usage:
# web3 = Web3(Web3.HTTPProvider('https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID'))
# with open('contracts/ERC721Token.sol', 'r') as file:
#     contract_source = file.read()
# private_key = 'YOUR_PRIVATE_KEY'
# account_address = 'YOUR_ACCOUNT_ADDRESS'
# address, abi = deploy_erc721_contract(web3, contract_source, 'ERC721Token', private_key, account_address)
# print(f'Contract deployed at: {address}')
# tx_receipt = mint_nft(web3, address, abi, 1, 'https://metadata.example.com/token/1', private_key, account_address)
# print(f'Minting Transaction Receipt: {tx_receipt}')
